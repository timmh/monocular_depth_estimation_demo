{"version":3,"sources":["inference.worker.js","utils.js","App.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","deserializeTensor","data","shape","tf","inferenceWorker","InferenceWorker","App","useState","inputSource","setInputSource","inputRef","useRef","outputRef","processing","setProcessing","inferCallback","useCallback","a","input","fromPixels","current","originalSize","resizeBilinear","infer","tensor","dataSync","output","toPixels","alert","onDrop","acceptedFiles","fr","FileReader","onload","result","readAsDataURL","useDropzone","accept","getRootProps","getInputProps","isDragActive","href","className","join","ref","alt","src","onClick","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIACI,IAAIA,EAAa,EAAQ,KACrBC,EAAU,CAAC,SACfC,EAAOC,QAAU,WAChB,IAAIC,EAAI,IAAIC,OAAO,IAA0B,iCAAkC,CAAEC,KAAM,qBAGvF,OAFAN,EAAWI,EAAGH,GAEPG,I,4TCDCG,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OAAqBC,IAAUF,EAAMC,ICGhEE,E,MAAkBC,KAkFTC,MAhFf,WAAgB,IAAD,EACyBC,mBAAS,WADlC,mBACNC,EADM,KACOC,EADP,KAEPC,EAAWC,iBAAO,MAClBC,EAAYD,iBAAO,MAHZ,EAIuBJ,oBAAS,GAJhC,mBAINM,EAJM,KAIMC,EAJN,KAMPC,EAAgBC,uBAAY,WAC5BH,IAGJC,GAAc,GACd,sBAAC,gCAAAG,EAAA,sEAEOC,EAAQf,IAAWgB,WAAWT,EAASU,SACrCC,EAAe,CAACH,EAAMhB,MAAM,GAAIgB,EAAMhB,MAAM,IAClDgB,EAAQf,IAASmB,eAAeJ,EAAO,CAAC,IAAK,MAJhD,KAKgBlB,EALhB,SAMWI,EAAgBmB,MD1BY,CAC1CtB,MAD8BuB,EC0BsBN,GDzBvCO,WACbvB,MAAOsB,EAAOtB,QCkBX,mBAKOwB,GALP,cAQGA,EAASvB,IAASmB,eAAeI,EAAQL,GACzClB,IAAWwB,SAASD,EAAQd,EAAUQ,SACtCN,GAAc,GAVjB,kDAYGc,MAAM,4BAZT,kCDpB0B,IAACJ,ICoB3B,oBAAD,MAeC,CAACd,EAAUG,EAAYC,IAEpBe,EAASb,uBACb,SAACc,GACC,IAAIjB,EAAJ,CAGA,IAAMkB,EAAK,IAAIC,WACfD,EAAGE,OAAS,WACVxB,EAAesB,EAAGG,SAEpBH,EAAGI,cAAcL,EAAc,OAEjC,CAACrB,EAAgBI,IAvCN,EAyCyCuB,YAAY,CAChEP,SACAQ,OAAQ,YAFFC,EAzCK,EAyCLA,aAAcC,EAzCT,EAyCSA,cAAeC,EAzCxB,EAyCwBA,aAKrC,OACE,qCACE,kEACmC,IACjC,mBAAGC,KAAK,qCAAR,sBAEF,sBAAKC,UAAU,MAAf,UACE,8CACEA,UAAW,CACT,iBACAF,EACI,4BACA,2BACJG,KAAK,MACHL,KAPN,cASE,yFACA,qCAAWC,MACX,qBAAKK,IAAKlC,EAAUmC,IAAI,GAAGC,IAAKtC,QAElC,sBAAKkC,UAAU,SAAf,UACE,4DACA,wBAAQE,IAAKhC,OAEf,qBAAK8B,UAAU,WAAf,SACE,wBAAQK,QAAShC,EAAeiC,SAAUnC,EAA1C,SACGA,EAAa,eAAiB,4BC9E3CoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.642d51ef.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"infer\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"a2a728b694ed717cea42.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import * as tf from \"@tensorflow/tfjs\";\n\nexport const serializeTensor = (tensor) => ({\n  data: tensor.dataSync(),\n  shape: tensor.shape,\n});\nexport const deserializeTensor = ({ data, shape }) => tf.tensor(data, shape);\n","/* eslint import/no-webpack-loader-syntax: off */\n\nimport \"./App.css\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport InferenceWorker from \"workerize-loader!./inference.worker\";\nimport { serializeTensor, deserializeTensor } from \"./utils\";\n\nconst inferenceWorker = InferenceWorker();\n\nfunction App() {\n  const [inputSource, setInputSource] = useState(\"cat.jpg\");\n  const inputRef = useRef(null);\n  const outputRef = useRef(null);\n  const [processing, setProcessing] = useState(false);\n\n  const inferCallback = useCallback(() => {\n    if (processing) {\n      return;\n    }\n    setProcessing(true);\n    (async () => {\n      try {\n        let input = tf.browser.fromPixels(inputRef.current);\n        const originalSize = [input.shape[0], input.shape[1]];\n        input = tf.image.resizeBilinear(input, [256, 256]);\n        let output = deserializeTensor(\n          await inferenceWorker.infer(serializeTensor(input))\n        );\n        output = tf.image.resizeBilinear(output, originalSize);\n        tf.browser.toPixels(output, outputRef.current);\n        setProcessing(false);\n      } catch (err) {\n        alert(\"An unknown error occured\");\n      }\n    })();\n  }, [inputRef, processing, setProcessing]);\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      if (processing) {\n        return;\n      }\n      const fr = new FileReader();\n      fr.onload = () => {\n        setInputSource(fr.result);\n      };\n      fr.readAsDataURL(acceptedFiles[0]);\n    },\n    [setInputSource, processing]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: \"image/*\",\n  });\n\n  return (\n    <>\n      <h1>\n        Monocular Depth Estimation using{\" \"}\n        <a href=\"https://arxiv.org/abs/1907.01341v3\">MiDaS</a>\n      </h1>\n      <div className=\"App\">\n        <div\n          className={[\n            \"image-dropzone\",\n            isDragActive\n              ? \"image-dropzone--highlight\"\n              : \"image-dropzone--default\",\n          ].join(\" \")}\n          {...getRootProps()}\n        >\n          <h2>Choose an input image by dropping or clicking to select</h2>\n          <input {...getInputProps()} />\n          <img ref={inputRef} alt=\"\" src={inputSource} />\n        </div>\n        <div className=\"output\">\n          <h2>Generated Depth Estimation</h2>\n          <canvas ref={outputRef}></canvas>\n        </div>\n        <div className=\"controls\">\n          <button onClick={inferCallback} disabled={processing}>\n            {processing ? \"Inferring...\" : \"Estimate Depth\"}\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}